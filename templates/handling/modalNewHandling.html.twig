{% import 'form.html.twig' as form %}

<div class="modal fade {{ setting_value('KEEP_HANDLING_MODAL_OPEN') ? 'keep-handling-modal-open' }}" data-modal-type="new" id="modalNewHandling" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            {% include 'utils/modal/header.html.twig' with {
                title: trans('Demande', 'Services', null, 'Nouvelle demande de service')
            } %}
            <input type="hidden" id="REMOVE_HOURS_DATETIME" value="setting_value('REMOVE_HOURS_DATETIME')">
            <div class="modal-body modal-input container-fluid">
                <div class="row">
                    <div class="form-group col-md-6 col-12">
                        <label class="wii-field-name" for="type">{{ trans( 'Demande', 'Général', 'Type') }}*</label>
                        <select name="type" class="form-control data d-block type needed"
                                onchange="onTypeChange($(this))">
                            <option value="">{{ trans('Demande', 'Services', 'Modale et détails', 'Type à choisir', false) }} ...</option>
                            {% set typeIsUnique = handlingTypes | length == 1 %}
                            {% for type in handlingTypes %}
                                <option value="{{ type.id }}" {{ typeIsUnique ? 'selected' }}>{{ type.label }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <div class="form-group col-md-6 col-12">
                        {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::status') %}
                        {% if fieldsParam|isFieldRequired(field.name, 'displayedCreate') %}
                        {% set required = fieldsParam|isFieldRequired(field.name, 'requiredCreate') %}
                        {% set right = hasRight(constant('App\\Entity\\Menu::DEM'), constant('App\\Entity\\Action::TREAT_HANDLING')) %}
                        {{ form.select(field.name, trans('Demande', 'Services', 'Modale et détails', 'Statut'), required, {
                            items: handlingStatus
                                | filter((status) =>
                                    (status.state == constant('App\\Entity\\Statut::TREATED') and right)
                                        or status.state != constant('App\\Entity\\Statut::TREATED')
                                )
                                | map((status) => {
                                    value: status.id,
                                    label: status.labelIn(userLanguage, defaultLanguage),
                                    class: 'd-none',
                                    'type-id': status.type.id
                                }),
                            emptyOption: {
                                selected: true,
                                text: trans('Demande', 'Services', 'Modale et détails', 'Choisir un statut...', false),
                                value: ''
                            },
                            sibling: form.hidden('defaultStatuses', defaultStatuses|json_encode )
                        }) }}
                        {% endif %}
                        <div class="error-empty-status d-none">
                            {% include 'utils/warningSelectEmpty.html.twig' with {
                                array: [],
                                warningLabel: 'Aucun statut pour ce type',
                                redirectPath: path('settings_item', {
                                    'category': constant('App\\Controller\\Settings\\SettingsController::CATEGORY_TRACING'),
                                    'menu': constant('App\\Controller\\Settings\\SettingsController::MENU_HANDLINGS'),
                                    'submenu': constant('App\\Controller\\Settings\\SettingsController::MENU_STATUSES'),
                                }),
                                redirectLabel: 'Aller vers la création des statuts',
                                block: true,
                                rights: {
                                    menu: constant('App\\Entity\\Menu::PARAM'),
                                    action: constant('App\\Entity\\Action::EDIT')
                                }
                            } %}
                        </div>
                    </div>

                    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::object') %}
                    {% if fieldsParam|isFieldRequired(field.name, 'displayedCreate') %}
                        {% set required = fieldsParam|isFieldRequired(field.name, 'requiredCreate') %}
                        <div class="form-group needed col-md-6 col-12">
                            {{ form.input(field.name, trans('Demande', 'Services', 'Zone liste - Nom de colonnes', 'Objet'), required, null) }}
                        </div>
                    {% endif %}

                    <div class="form-group d-flex flex-column col-md-6 col-12">
                        <label class="wii-field-name">{{ trans('Demande', 'Général', 'Demandeur') }}</label>
                        <label class="data wii-body-text" value="{{ app.user.id }}">{{ app.user.username }}</label>
                    </div>

                    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::expectedAt') %}
                    {% set removeHours = setting_value('REMOVE_HOURS_DATETIME') %}
                    {% set dateFormat = app.user.displayedDateFormat ~ (not removeHours ? ' hh:mm') %}
                    {% set preFillDate = preFill ? (removeHours ? "now" | date('Y-m-d') : "now" | date('Y-m-d H:i')) : '' %}
                    <div class="form-group needed col-md-6 col-12">
                        {{ form.input(field.name, trans('Demande', 'Services', 'Modale et détails', 'Date attendue'), true, null, {
                            inputClass: removeHours ? 'date-field' : 'datetime-field',
                            additionalAttributes: [
                                { name: 'data-init', value: preFillDate }
                            ]
                        })  }}
                    </div>

                    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::emergency') %}
                    {% if fieldsParam|isFieldRequired(field.name, 'displayedCreate') %}
                        {% set required = fieldsParam|isFieldRequired(field.name, 'requiredCreate') %}
                        <div class="form-group col-md-6 col-12">
                            {{ form.select(field.name, trans('Demande', 'Général', 'Urgences', false), required, {
                                items:emergencies|map((item) => {
                                    value: item,
                                    label: item
                                }),
                                emptyOption: {
                                    selected: true,
                                    text: trans( 'Demande', 'Général', 'Non urgent', false),
                                    value : '',
                                },
                            } ) }}
                        </div>
                    {% endif %}


                    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::loadingZone') %}
                    {% if fieldsParam|isFieldRequired(field.name, 'displayedCreate') %}
                        {% set required = fieldsParam|isFieldRequired(field.name, 'requiredCreate') %}
                        <div class="form-group needed col-md-6 col-12">
                            {{ form.input(field.name, trans('Demande', 'Services', 'Modale et détails', 'Chargement'), required, null) }}
                        </div>
                    {% endif %}


                    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::unloadingZone') %}
                    {% if fieldsParam|isFieldRequired(field.name, 'displayedCreate') %}
                        {% set required = fieldsParam|isFieldRequired(field.name, 'requiredCreate') %}
                        <div class="form-group needed col-md-6 col-12">
                            {{ form.input(field.name, trans('Demande', 'Services', 'Modale et détails', 'Déchargement'), required, null) }}
                        </div>
                    {% endif %}


                    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::carriedOutOperationCount') %}
                    {% if fieldsParam|isFieldRequired(field.name, 'displayedCreate') %}
                        {% set required = fieldsParam|isFieldRequired(field.name, 'requiredCreate') %}
                        <div class="form-group needed col-md-6 col-12">
                            {{ form.number(field.name, trans('Demande', 'Services', 'Modale et détails', 'Nombre d\'opération(s) réalisée(s)'), required, null, {
                                labelClass: 'w-100',
                                min: 0
                            }) }}
                        </div>
                    {% endif %}


                    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::receivers') %}
                    {% if fieldsParam|isFieldRequired(field.name, 'displayedCreate') %}
                        {% set required = fieldsParam|isFieldRequired(field.name, 'requiredCreate') %}
                        <div class="form-group col-md-6 col-12">
                            {{ form.select(field.name, trans('Demande', 'Services', 'Zone liste - Nom de colonnes', 'Destinataires'), required, {
                                type: 'user',
                                multiple :true,
                                inputClass: 'receivers-picker',
                            }) }}
                        </div>
                    {% endif %}

                    <!-- CHAMPS LIBRES -->
                    <div class="col-12">
                        <span class="toggle-collapsible expanded">{{ trans('Général', null, 'Modale', 'Champs libres') }}</span>
                        <div class="collapsible expanded free-fields-container mb-2">
                            {% for type in types %}
                                <div class="d-none"
                                     data-type="{{ type.id }}">
                                    {% include 'free_field/freeFieldsEdit.html.twig' with {
                                        freeFieldManagementRules: type.freeFieldManagementRules,
                                        freeFieldValues: [],
                                        colType: 'col-md-6 col-12',
                                        requiredType: 'requiredCreate',
                                        actionType: 'new',
                                        needsDateFormatting: true
                                    } %}
                                </div>
                            {% endfor %}
                        </div>
                    </div>

                    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::comment') %}
                    <div class="form-group col-12">
                        {{ form.wysiwyg(field.name, trans('Général', null, 'Modale', 'Commentaire'), false, null) }}
                    </div>
                    <div class="form-group col-12">
                        {% include 'attachment/attachment.html.twig' with {
                            fieldNameClass: 'wii-field-name wii-field-name-sub',
                            isNew: true,
                        } %}
                    </div>
                </div>
            </div>
            {% include 'utils/modal/footer.html.twig' with {
                elements: [
                    {classes: 'btn btn-outline-secondary', dismiss: true, text: trans('Général', null, 'Modale', 'Annuler')},
                    {classes: 'btn btn-success', text: trans('Général', null, 'Modale', 'Enregistrer'), id: 'submitNewHandling', type: 'submit'}
                ],
            } %}

        </div>
    </div>
</div>

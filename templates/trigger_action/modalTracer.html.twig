{% import 'form.html.twig' as form %}

{% set ACTION_TYPE_ZONE_ENTER = constant('App\\Entity\\IOT\\TriggerAction::ACTION_TYPE_ZONE_ENTER') %}
{% set ACTION_TYPE_ZONE_EXIT = constant('App\\Entity\\IOT\\TriggerAction::ACTION_TYPE_ZONE_EXIT') %}

<div class="">
    <div class="d-flex align-items-end">
        <span class="text-nowrap">
           Si le tracer
        </span>
            {{ form.select(
                'action',
                null,
                true, {
                    items : [{
                        label: 'entre',
                        value: ACTION_TYPE_ZONE_ENTER,
                        selected: triggerAction is defined ? triggerAction.actionType == ACTION_TYPE_ZONE_ENTER : true,
                    }, {
                        label: 'sort',
                        value: ACTION_TYPE_ZONE_EXIT,
                        selected: triggerAction is defined ? triggerAction.actionType == ACTION_TYPE_ZONE_EXIT : false,
                    }],
                }
            ) }}
            <span class="text-nowrap">
            dans la zone
        </span>
        {% set zoneId = triggerAction is defined ? (triggerAction.config[ACTION_TYPE_ZONE_ENTER] ?? triggerAction.config[ACTION_TYPE_ZONE_EXIT ] ?? null) : null %}
        {{ form.input('zoneId', null, true, zoneId, {
            labelWidth : '',
        }) }}
    </div>
    <div class="mt-3 row trigger-action-data">
        <div class="col-12">
            {{ form.select('templateType', 'Type de modèle', true, {
                disabled: false,
                items: templateTypes|map((value, key) => {
                    label: value,
                    value: key,
                    selected: triggerAction is defined and (
                    (key == constant('App\\Entity\\IOT\\TriggerAction::ALERT') and triggerAction.alert)
                    or (key == constant('App\\Entity\\IOT\\TriggerAction::REQUEST') and triggerAction.request)
                    or key in triggerAction.config|keys
                    )
                }),
                onChange: 'onTemplateTypeChange($(this))',
                emptyOption: {label: '', value: '', selected: true},
            }) }}
        </div>
        <div class="col-12 template-details-wrapper">
            {{ form.select('templates', 'Modèle', true, {
                disabled: true,
                labelClass: 'd-none w-100',
            }) }}
            {{ form.select('dropOnLocation', 'Emplacement de dépose', true, {
                type: 'location',
                labelClass: 'd-none w-100',
            }) }}
        </div>
    </div>
</div>


{% import 'form.html.twig' as form %}
{% import 'utils/fixed-field-by-type.html.twig' as macros %}

{% set displayAction = productionRequest.id ? 'displayedEdit' : 'displayedCreate' %}
{% set requiredAction = productionRequest.id ? 'requiredEdit' : 'requiredCreate' %}
{% set typeCanChange =  productionRequest.id ? false : true %}

{{ form.input('id', null, false, productionRequest.id, {
    type: 'hidden',
}) }}
<div class="row">
    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::type')%}
    <div class="col-md-6 col-12 mb-2">
        {{ form.select(field.name, field.value, true, {
            type: 'productionRequestType',
            placeholder: 'Sélectionnez un type',
            disabled: productionRequest.id ? true : false,
            search: true,
            value: productionRequest.type ? productionRequest.type.id : null,
            items:productionRequest.type ? {
                0: {
                    'value': productionRequest.type.id,
                    'label':  productionRequest.type.label,
                    'selected': true
                }
            } : null,
            additionalAttributes: productionRequest.type
                ? []
                : [
                    { name: 'data-other-params'},
                    { name: 'data-other-params-with-drop-location', value: 'true' }
                ],
        }) }}
    </div>

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::status')%}
    <div class="col-md-6 col-12 mb-2">
        {{ form.select(field.name, field.value, true, {
            type: 'status',
            disabled: isDuplication is defined and isDuplication ? false : not productionRequest.type or (productionRequest.status and productionRequest.status.treated),
            value: productionRequest.status ? productionRequest.status.id : null,
            items: productionRequest.status
                ? [{
                    'value': productionRequest.status.id,
                    'label':  productionRequest.status.nom,
                    'selected': true
                }]
                : [],
            includeParams: '[name=type]',
            additionalAttributes: [
                { name: 'onChange', value: 'displayAttachmentRequired($(this))' },
            ],
        }) }}
        <div class="error-empty-status d-none">
            {% include 'utils/warningSelectEmpty.html.twig' with {
                array: [],
                warningLabel: 'Attention ! Aucun statut pour ce type',
                redirectPath: path('settings_item', {
                    'category': constant('App\\Controller\\Settings\\SettingsController::CATEGORY_PRODUCTION'),
                    'menu': constant('App\\Controller\\Settings\\SettingsController::MENU_FULL_SETTINGS'),
                    'submenu': constant('App\\Controller\\Settings\\SettingsController::MENU_STATUSES'),
                }),
                redirectLabel: 'Créer un statut',
                block: true,
                rights: {
                    menu: constant('App\\Entity\\Menu::PARAM'),
                    action: constant('App\\Entity\\Action::EDIT')
                }
            } %}
        </div>
    </div>

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::manufacturingOrderNumber')%}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {% set requiredOnform = typeCanChange ? false : fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.input(field.name, field.value, requiredOnform, productionRequest.manufacturingOrderNumber) }}
        </div>
    {% endif %}

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::productArticleCode') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {% set requiredOnform = typeCanChange ? false :fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.input(field.name, field.value, requiredOnform, productionRequest.productArticleCode) }}
        </div>
    {% endif %}

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::expectedAt') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        {% if not productionRequest.id %}
            {{ form.hidden("expectedAtSettings", expectedAtSettings | json_encode) }}
        {% endif %}

        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {% set canEditExpectedAt = hasRight(constant('App\\Entity\\Menu::PRODUCTION'), constant('App\\Entity\\Action::EDIT_EXPECTED_DATE_FIELD_PRODUCTION_REQUEST')) %}
            {% set requiredOnform = typeCanChange ? false : fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.input(field.name, field.value, requiredOnform, productionRequest.expectedAt ? productionRequest.expectedAt|date('Y-m-d H:i') : null, {
                type: 'datetime-local',
                disabled: not canEditExpectedAt,
                min: productionRequest.id and productionRequest.type ? (expectedAtSettings[productionRequest.type.id] ?? null)
            }) }}
        </div>
    {% endif %}

    {% set field= constant('App\\Entity\\Fields\\FixedFieldEnum::dropLocation') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {% set requiredOnform = typeCanChange ? false : fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.select(field.name, field.value, requiredOnform, {
                type: 'location',
                value: productionRequest.dropLocation ? productionRequest.dropLocation.id : null,
                items: productionRequest.dropLocation ? [{
                    value: productionRequest.dropLocation.id,
                    label: productionRequest.dropLocation.label
                }] : [],
                additionalAttributes: [
                    {name: "data-other-params"},
                    {name: "data-other-params-typeDispatchDropLocation", value: productionRequest.type ? productionRequest.type.id : ""},
                ],
            }) }}
        </div>
    {% endif %}

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::destinationLocation') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 mb-2 {{ typeCanChange ? "d-none" : "" }}">
            {% set requiredOnform = typeCanChange ? false : fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.select(field.name, field.value, requiredOnform, {
                type: 'location',
                value: productionRequest.destinationLocation ? productionRequest.destinationLocation.id : null,
                items: productionRequest.destinationLocation ? [{
                    value: productionRequest.destinationLocation.id,
                    label: productionRequest.destinationLocation.label
                }] : [],
            }) }}
        </div>
    {% endif %}

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::quantity') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {% set requiredOnform = typeCanChange ? false :not typeCanChange and fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.input(field.name, field.value, requiredOnform, productionRequest.quantity, {
                type: 'number',
                min: 1,
            }) }}
        </div>
    {% endif %}

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::lineCount') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {% set requiredOnform = typeCanChange ? false : fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.input(field.name, field.value, requiredOnform, productionRequest.lineCount, {
                type: 'number',
                min: 0,
            }) }}
        </div>
    {% endif %}

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::emergency') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
             class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {% set requiredOnform = typeCanChange ? false : fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.select(field.name, trans('Demande', 'Général', 'Urgence'), requiredOnform, {
                items: emergencies|map(item => ({
                    value: item,
                    label: item,
                    selected: productionRequest.emergency == item,
                })),
                emptyOption: {
                    selected: not productionRequest.emergency,
                    label: trans('Demande', 'Général', 'Non urgent', false)
                }
            }) }}
        </div>
    {% endif %}

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::projectNumber') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {% set requiredOnform = typeCanChange ? false : fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.input(field.name, field.value, requiredOnform, productionRequest.projectNumber) }}
        </div>
    {% endif %}

    <!-- CHAMPS LIBRES -->
    <div class="col-12">
        <span class="toggle-collapsible expanded">{{ trans('Général', null, 'Modale', 'Champs libres') }}</span>
        <div class="collapsible expanded free-fields-container mb-2">
            {% set types = productionRequest.id
                ? [productionRequest.type]
                : types
            %}
            {% for type in types %}
                <div class="{{ types|length > 1 ? ' d-none' }}"
                     data-type="{{ type.id }}">
                    {% include 'free_field/freeFieldsEdit.html.twig' with {
                        freeFieldManagementRules: type.freeFieldManagementRules,
                        freeFieldValues: productionRequest.freeFields,
                        colType: 'col-md-4 col-12',
                        requiredType: requiredAction,
                        actionType: requiredAction ==  "requiredCreate" ? 'new' : 'edit',
                        disabledNeeded: false,
                        needsDateFormatting: true
                    } %}
                </div>
            {% endfor %}
        </div>
    </div>

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::comment') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {% set requiredOnform = fieldsParam|isFieldRequired(field.name, requiredAction) %}
            {{ form.wysiwyg(field.name, trans('Général', null, 'Modale', 'Commentaire'), requiredOnform, productionRequest.comment) }}
        </div>
    {% endif %}

    {% set field = constant('App\\Entity\\Fields\\FixedFieldEnum::attachments') %}
    {% set displayOnform = fieldsParam|isFieldRequired(field.name, displayAction) %}
    {% if displayOnform %}
        <div
            {{ macros.dataAttributesFieldbyType(fieldsParam, field.name) }}
            class="form-group col-md-4 col-12 {{ typeCanChange ? "d-none" : "" }}">
            {{ form.attachment(constant('App\\Entity\\Fields\\FixedFieldEnum::attachments').value, false, productionRequest.attachments, {
                isNew: productionRequest.id is null,
                addPhotoButton: true,
            }) }}
        </div>
    {% else %}
        {{ form.hidden('isAttachmentForm', 1) }}
    {% endif %}
</div>
